# Contains all of the webApp parameters.
# Note that this configuration file will be imported after the shared parameters config
# For more, see overwatch.base.config
#
# Note:
#    The folder structure for flask can get complicated. See the variables below for their
#    purposes. One can generally set staticFolder without staticURLPath, but not the reverse.
#    For more information of flask folder structure,
#    see (for example): https://stackoverflow.com/a/18746493
#
# author: Raymond Ehlers <raymond.ehlers@cern.ch>, Yale University
# date: 16 July 2018

# Sets the ip address.
ipAddress: "0.0.0.0"

# Sets the port.
port: 8850

# Default user name. An empty string will disable it.
# Should only be used when behind CERN SSO!
defaultUsername: ""

# basePath is just a useful value.
# It defines a base directory to reference if the static, template, etc folders are
# all in the same dir.
basePath: ""

# staticFolder is the disk location of the static folder.
# It is a flask defined variable.
# To check if the static files are from the front-end webserver, use:
# https://stackoverflow.com/questions/16595691/static-files-with-flask-in-production
#
# (ie. add + "CHANGE" to the staticFolder location specified here).
#staticFolder = os.path.join(sharedParameters.staticFolderName) 
staticFolder: *staticFolder

# staticURLPath is the URL of the static folder.
# If you want to access "foo", it would be at $BASE_URL/staticURLPath/foo. "" is just the root.
# It is a flask defined variable.
staticURLPath: "/static"

# protectedFolder is the disk location of the protected folder.
# This folder holds the experimental data.
protectedFolder: *dataFolder

# docsFolder is the disk location of the docs folder.
docsFolder: &docsFolder "doc"

# docsBuildFolder is the disk location of the docs html folder.
docsBuildFolder: !joinPaths
    - *docsFolder
    - "build"
    - "html"

# Subsystems which have templates available (determined on startup).
# Since this is run from the root directory, we need to go into the "webApp" directory to find the templates!
availableRunPageTemplates: !findRunPageTemplates
    - *templateFolder

# Whether to perform debugging on the setting up of the flask assets. This is determined
# separately from other debug options because it can be rather difficult to debug.
flaskAssetsDebug: null

# Sites to check during the status request.
statusRequestSites: {}

######
# Sensitive parameters
######
# Defines the users way may be added to the database depending on the configuration.
# Note that this will currently not create any users. The dict is defined with an
# underscore since it is a private value. Each user sure should added of the form `username: "password"`
# If the password is not hashed, then the _users type should be "!bcrypt". It will then automatically
# hash all passwords that are passed.
# NOTE: Bcrypt log rounds can be set here, but is not by default. For more on how to set it,
#       see overwatch.base.config.bcrypt. This is not set via an alias on purpose. This is because,
#       for example, the processing module doesn't define a _users field, but it still could be defined
#       in the user config (ie. config.yaml). In that case, the alias would be undefined, since it would
#       naturally be defined in the webApp config. So instead, we rely on the default defined
#       in overwatch.base.config.bcrypt.
_users: !bcrypt
    null: null

# Secret key for signing cookies
# Defined with an underscore since it is a private value.
# If "false" is passed, then the value will be generated automatically
# using urandom(50), as suggested by the flask developers.
_secretKey: !secretKey false

